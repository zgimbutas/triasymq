Quadratures for triangles, squares, cubes and tetrahedra

Copyright (C) 2009-2012: Zydrunas Gimbutas and Hong Xiao

Contact: Zydrunas Gimbutas <gimbutas@cims.nyu.edu>
         Hong Xiao <hxiao@ucdavis.edu>

Date: April 1, 2014

Version 1.7




makefile - run a simple test (triasymq)



triasymq.f - construct (or rather retrieve) a symmetric quadrature formula 
on the user-defined triangle in the plane.

triasymq_dr.f - driver routines for triasymq.f

makefile.triasymq - makefile for triasymq.f
                       ( make -f makefile.triasymq )

c
c   n       1     2     3     4     5     6     7     8     9    10
c  -----------------------------------------------------------------
c nodes     1     3     6     6     7    12    15    16    19    25
c
c
c   n      11    12    13    14    15    16    17    18    19    20
c  -----------------------------------------------------------------
c nodes    28    33    37    42    49    55    60    67    73    79
c
c
c   n      21    22    23    24    25    26    27    28    29    30
c  -----------------------------------------------------------------
c nodes    87    96   103   112   120   130   141   150   159   171
c
c
c   n      31    32    33    34    35    36    37    38    39    40
c  -----------------------------------------------------------------
c nodes   181   193   204   214   228   243   252   267   282   295
c
c
c   n      41    42    43    44    45    46    47    48    49    50
c  -----------------------------------------------------------------
c nodes   309   324   339   354   370   385   399   423   435   453



squaresymvq.f - construct (or rather retrieve) a moderately symmetric
quadrature formula for the unit square [-1,1]^2.

squaresymvq_dr.f - driver routines for squaresymvq.f

makefile.squaresymvq - makefile for squaresymvq.f 
                       ( make -f makefile.squaresymvq )

c   n       1     2     3     4     5     6     7     8     9    10
c  -----------------------------------------------------------------
c nodes     1f    4f    4f    7c    7c   12r   12r   17r   17r*  24r
c
c
c   n      11    12    13    14    15    16    17    18    19    20
c  -----------------------------------------------------------------
c nodes    24r*  33r   33r*  44r   44r*  55c   55c*  68r   68r*  81r
c
c
c       f  - fully symmetry
c       r  - rotational symmetry only (rotate by 90 degrees)
c       c  - center symmetry only (rotate by 180 degrees)
c
c       *  - number of quadrature nodes is less than (n+1)*(n+2)/2/3



squarearbq.f - construct (or rather retrieve) a quadrature formula 
for the unit square [-1,1]^2.

squarearbq_dr.f - driver routines for squarearbq.f

makefile.squarearbq - makefile for squarearbq.f ( make -f makefile.squarearbq )

c   n       1     2     3     4     5     6     7     8     9    10
c  -----------------------------------------------------------------
c nodes     1f    3    4f     6    7c    10    12r   16    17r*  22
c
c
c   n      11    12    13    14    15    16    17    18    19    20
c  -----------------------------------------------------------------
c nodes    24r*  31    33r*  41@   44r*  52   55c*   64   68r*   78
c
c
c   n      21    22    23    24    25    26    27    28    29    30
c  -----------------------------------------------------------------
c nodes    82c*  93    98c* 109   115c* 127   132r* 147   152r* 167
c
c
c       f  - full symmetry
c       r  - rotational symmetry only (rotate by 90 degrees)
c       c  - center symmetry only (rotate by 180 degrees)
c
c       *  - number of quadrature nodes is less than (n+1)*(n+2)/2/3



cubearbq.f - construct (or rather retrieve) a quadrature formula for
the unit cube [-1,1]^3. These are non-symmetric quadrature nodes in
general, but come in pairs for orders 3, 5, 7, 9, 11, 13, and 15. 
Note that 14-th degree quadrature has one negative weight.

cubearbq_dr.f - driver routines for cubearbq.f

makefile.cubearbq - makefile for cubearbq.f ( make -f makefile.cubearbq )

c   n       1     2     3     4     5     6     7     8     9    10
c  -----------------------------------------------------------------
c nodes     1     4     6    10    13*   22    26*   42    50*   73
c
c
c   n      11    12    13    14    15   
c  -----------------------------------------------------------------
c nodes    84*  116   130*  172n  190*
c
c       
c       *  - number of quadrature nodes is less than (n+1)*(n+2)*(n+3)/6/4
c       n  - negative weight



tetraarbq.f - construct (or rather retrieve) a quadrature formula for
the standard tetrahedron, defined by vertices
(-1,-1/Sqrt[3],-1/Sqrt[6]), (0,2/Sqrt[3],-1/Sqrt[6]), 
(1,-1/Sqrt[3],-1/Sqrt[6]), and (0,0,3/Sqrt[6]).
Only orders 1 and 5 are fully symmetric.

tetraarbq_dr.f - driver routines for tetraarbq.f

makefile.tetraarbq - makefile for tetraarbq.f ( make -f makefile.tetraarbq )

c   n       1     2     3     4     5     6     7     8     9    10
c  -----------------------------------------------------------------
c nodes     1     4     6    11    14    23    31    44    57    74
c
c   n      11    12    13    14    15
c  -----------------------------------------------------------------
c nodes    95   122   146   177   214
c


Testing and debugging routines:

lege2eva.f - orthogonal polynomials on a unit square
lege3eva.f - orthogonal polynomials on a unit cube
ortho2eva.f - orthogonal polynomials on a triangle
ortho3eva.f - orthogonal polynomials on a tetrahedron

tetragauc.f - tensor product rule for smooth functions on a tetrahedron
gaussq.f - Gaussian type quadratures (from netlib.org)

legeexps.f - Legendre expansion routines
prini.f - printing routines

gen_table - helper script to generate *_table.txt files



Notes: 

1) In squarearbq.f tables, all nodes are interior.  Currently,
squarearbq.f returns 41 node quadrature for degree 14 (40 node
quadrature for degree 14 can be found in xs14out,ws14out table, 
it has one node slightly outside the square).

2) triasymq tables are accurate to approximately 32 digits, all other
tables are precomputed to double precision only (15 digits).

3) cubearbq table has one negative weight for 14-th degree quadrature.


References:

H. Xiao, Z. Gimbutas, "A numerical algorithm for the construction
of efficient quadrature rules in two and higher dimensions,"
Computers and Mathematics with Applications, 59 (2009), pp. 663-676







 
